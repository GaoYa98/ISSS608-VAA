---
title: "Hands-on_Ex06"
author: "Gao Ya"
Date: "February 23, 2024"
date-modified: "last-modified"
excute:
  eval: false
  echo: false
  freeze: true
  message: false
  warning: false
---


# 1. Overview
By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:

- plotting a calender heatmap by using ggplot2 functions,
- plotting a cycle plot by using ggplot2 function,
- plotting a slopegraph
- plotting a horizon chart

# 2. Load packages and Data Preparation 

## 2.1 Load packages
Install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.
```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)
```

## 2.2 Import data
Install and launch the following R packages: `scales`, `viridis`, `lubridate`, `ggthemes`, `gridExtra`, `readxl`, `knitr`, `data.table` and `tidyverse`.
```{r}
attacks <- read_csv("data/eventlog.csv")
```

## 2.3 Examine Data Structure
`kable()` can be used to review the structure of the imported data frame.
```{r}
kable(head(attacks))
```
There are three columns, namely timestamp, source_country and tz.

- `timestamp` field stores date-time values in POSIXct format.
- `source_countr`y field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.
- `tz` field stores time zone of the source IP address.


## 2.4 Data Preparation
Step 1: Deriving weekday and hour of day fields
```{r}
#| code-fold: true
#| code-summary: "Show the code"
make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
  }
```

Step 2: Deriving the attacks tibble data frame

```{r}
#| code-fold: true
#| code-summary: "Show the code"
wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))
```

Table below shows the tidy tibble table after processing.
```{r}
kable(head(attacks))
```

# 3. Calendar Heatmaps
## 3.1 Building the Calendar Heatmaps

```{r}
#| code-fold: true
#| code-summary: "Show the code"
grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )
```


## 3.2 Plotting Multiple Calendar Heatmaps
```{r}
#| code-fold: true
#| code-summary: "Show the code"

attacks_by_country <- count(
  attacks, source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))

top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country, levels = top4)) %>%
  na.omit()

ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )
```

# 4. Plotting Cycle Plot
## 4.1 Data Preparation
The code chunk below imports arrivals_by_air.xlsx by using `read_excel()` of `readxl` package and save it as a tibble data frame called air.
```{r}
#| code-fold: true
#| code-summary: "Show the code"

air <- read_excel("data/arrivals_by_air.xlsx")

air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))

Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)

hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

## 4.2 Plotting the cycle plot
The code chunk below is used to plot the cycle plot as shown in Slide 12/23.
```{r}
#| code-fold: true
#| code-summary: "Show the code"


ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="black") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="red", 
             size=0.5) + 
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("") +
  ylab("No. of Visitors") +
  theme_tufte(base_family = "Helvetica")
```

# 5. Plotting Slopegraph
In this section we will learn how to plot a `slopegraph` by using R.

## 5.1 Data Preparation
Import the rice data set into R environment by using the code chunk below.
```{r}
rice <- read_csv("data/rice.csv")
```
## 5.2 Plotting the slopegraph
Next, code chunk below will be used to plot a basic `slopegraph` as shown below.
```{r}
#| code-fold: true
#| code-summary: "Show the code"

rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980",
                Caption = "Prepared by: Dr. Kam Tin Seong")
```





