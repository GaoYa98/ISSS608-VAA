---
title: "Hands-on_Ex08"
author: "Gao Ya"
Date: "March 8, 2024"
date-modified: "last-modified"
excute:
  eval: false
  echo: false
  freeze: true
  message: false
  warning: false 
---

# 1. Modelling, Visualising and Analysing Network Data with R

By the end of this hands-on exercise, you will be able to:

-   create graph object data frames,

-   manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,

-   build network graph visualisation using appropriate functions of ggraph,

-   compute network geometrics using tidygraph,

-   build advanced graph visualisation by incorporating the network geometrics,

-   and build interactive network visualisation using visNetwork package.

## 1.1 Installing and launching R packages
In this hands-on exercise, four network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these four packages, tidyverse and lubridate, an R package specially designed to handle and wrangling time data will be installed and launched too.
```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts)
```
## 1.2 Import Data and wrangling
Import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.
```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```
Examine the structure of the data frame using glimpse() of dplyr.
```{r}
glimpse(GAStech_edges)
```
The code chunk below will be used to perform the changes.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))

GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```
## 1.3 Creating network objects using tidygraph
In this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.
### 1.3.1 Using tbl_graph() to build tidygraph data model
Use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

```{r}
GAStech_graph
```

### 1.3.2 Changing the active object
The nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange().
```{r}
#| code-fold: true
#| code-summary: "Show the code"
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

## 1.4 Plotting Static Network Graphs with ggraph package
ggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.

As in all network graph, there are three main aspects to a ggraph’s network graph, they are:

-   nodes,
-   edges and
-   layouts.

### 1.4.1 Plotting a basic network graph with colour change
The code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.
Furthermore, theme_graph() makes it easy to change the coloring of the plot.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

### 1.4.2 Fruchterman and Reingold layout and Modifying network nodes
The code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

## 1.5 Creating facet graphs
Another very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.

### 1.5.1 Working with facet_edges()
In the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

### 1.5.2 A framed facet graph
The code chunk below adds frame to each graph.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

### 1.5.3 Working with facet_nodes()
In the code chunkc below, facet_nodes() is used. Before getting started, it is advisable for you to read it’s reference guide at least once.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```


## 1.6 Network Metrics Analysis
### 1.6.1  Visualising network metrics
It is important to note that from ggraph v2.0 onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

### 1.6.2 Visualising Community
tidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,

In the code chunk below group_edge_betweenness() is used.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
g <- GAStech_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

g + theme_graph()
```

## 1.7  Building Interactive Network Graph with visNetwork
visNetwork() is a R package for network visualization, using vis.js javascript library.
visNetwork() function uses a nodes list and edges list to create an interactive graph.
The resulting graph is fun to play around with.

-   You can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.
-   You can also zoom in and out on the plot and move it around to re-center it.

### 1.7.1 Data Preparation
Before we can plot the interactive network graph, we need to prepare the data model by using the code chunk below.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(dplyr)
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```
### 1.7.2 Plotting the first interactive network graph
The code chunk below will be used to plot an interactive network graph by using the data prepared.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(visNetwork)
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)
```

### 1.7.3 Working with visual attributes - Nodes
visNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.

The code chunk below rename Department field to group.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### 1.7.4 Working with visual attributes - Edges
In the code run below visEdges() is used to symbolise the edges.
- The argument arrows is used to define where to place the arrow.
- The smooth argument is used to plot the edges using a smooth curve.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### 1.7.5 Interactivity
In the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.

-   The argument highlightNearest highlights nearest when clicking a node.
-   The argument nodesIdSelection adds an id node selection creating an HTML select element.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```













