{
  "hash": "62e951d31d9e9179d5bbce992c825477",
  "result": {
    "markdown": "---\ntitle: \"Hands-on_Ex03\"\nauthor: \"Gao Ya\"\ndate: \"January 26, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n\n#Part 1: Programming Interactive Data Visualisation with R\n\n# 1. Learning outcome\n\nLearn how to create interactive data visualization by using functions provided by `ggiraph` and `plotlyr` packages.\n\n# 2. Set up\n\n## 2.1 Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\npackage 'ggiraph' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\carol\\AppData\\Local\\Temp\\RtmpCszXu7\\downloaded_packages\npackage 'plotly' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\carol\\AppData\\Local\\Temp\\RtmpCszXu7\\downloaded_packages\npackage 'DT' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\carol\\AppData\\Local\\Temp\\RtmpCszXu7\\downloaded_packages\n```\n:::\n:::\n\n\n## 2.2 Importing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n# 3. Interactive Data Visualisation - ggiraph methods\n\nggiraph is a tool that allows you to create dynamic ggplot graphs. This allows you to add tooltips, hover effects and JavaScript actions to the graphics. The package also allows the selection of graphical elements when used in shiny applications.\n\n## 3.1 Tooltip effect with tooltip aesthetic\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in geom_dotplot_interactive(aes(tooltip = ID), stackgroups = TRUE, : could not find function \"geom_dotplot_interactive\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in girafe(ggobj = p, width_svg = 6, height_svg = 6 * 0.618): could not find function \"girafe\"\n```\n:::\n:::\n\n\nWhen hovering the mouse pointer on an data point of interest, the studentâ€™s ID will be displayed.\n\n### 3.1.1 Displaying multiple information on tooltip\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nexam_data$tooltip <- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in geom_dotplot_interactive(aes(tooltip = exam_data$tooltip), stackgroups = TRUE, : could not find function \"geom_dotplot_interactive\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in girafe(ggobj = p, width_svg = 8, height_svg = 8 * 0.618): could not find function \"girafe\"\n```\n:::\n:::\n\n\n### 3.1.2 Displaying statistics on tooltip\n\nA function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ntooltip <- function(y, ymax, accuracy = .01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point <- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'GeomInteractiveCol' not found\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in girafe(ggobj = gg_point, width_svg = 8, height_svg = 8 * 0.618): could not find function \"girafe\"\n```\n:::\n:::\n\n\n### 3.1.3 Hover effect with data_id aesthetic\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in geom_dotplot_interactive(aes(data_id = CLASS), stackgroups = TRUE, : could not find function \"geom_dotplot_interactive\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in girafe(ggobj = p, width_svg = 6, height_svg = 6 * 0.618): could not find function \"girafe\"\n```\n:::\n:::\n\n\n### 3.1.4 Styling hover effect\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in geom_dotplot_interactive(aes(data_id = CLASS), stackgroups = TRUE, : could not find function \"geom_dotplot_interactive\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                                                          \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in girafe(ggobj = p, width_svg = 6, height_svg = 6 * 0.618, options = list(opts_hover(css = \"fill: #202020;\"), : could not find function \"girafe\"\n```\n:::\n:::\n\n\n### 3.1.5 Combining tooltip and hover effect\n\nCombine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in geom_dotplot_interactive(aes(tooltip = CLASS, data_id = CLASS), : could not find function \"geom_dotplot_interactive\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in girafe(ggobj = p, width_svg = 6, height_svg = 6 * 0.618, options = list(opts_hover(css = \"fill: #202020;\"), : could not find function \"girafe\"\n```\n:::\n:::\n\n\n### 3.1.6 Click effect with onclick\n\n`onclick` argument of ggiraph provides hotlink interactivity on the web.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in geom_dotplot_interactive(aes(onclick = onclick), stackgroups = TRUE, : could not find function \"geom_dotplot_interactive\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                                             \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in girafe(ggobj = p, width_svg = 6, height_svg = 6 * 0.618): could not find function \"girafe\"\n```\n:::\n:::\n\n\n### 3.1.7 Coordinated Multiple Views with ggiraph\n\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views. patchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in geom_dotplot_interactive(aes(data_id = ID), stackgroups = TRUE, : could not find function \"geom_dotplot_interactive\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in geom_dotplot_interactive(aes(data_id = ID), stackgroups = TRUE, : could not find function \"geom_dotplot_interactive\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in girafe(code = print(p1 + p2), width_svg = 6, height_svg = 3, : could not find function \"girafe\"\n```\n:::\n:::\n\n\n# 4. Interactive Data Visualisation - plotly methods\n\nPlotlyâ€™s R graphing library create interactive web graphics from `ggplot2` graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\n![](images/clipboard-87859633.png)\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and by using ggplotly()\n\n## 4.1 Creating an interactive scatter plot: plot_ly() method\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in plot_ly(data = exam_data, x = ~MATHS, y = ~ENGLISH): could not find function \"plot_ly\"\n```\n:::\n:::\n\n\n## 4.2 Working with visual variable: plot_ly() method\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. CLASS).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~CLASS)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in plot_ly(data = exam_data, x = ~ENGLISH, y = ~MATHS, color = ~CLASS): could not find function \"plot_ly\"\n```\n:::\n:::\n\n\n## 4.3 Creating an interactive scatter plot: ggplotly() method\n\nThe code chunk below plots an interactive scatter plot by using `ggplotly()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplotly(p): could not find function \"ggplotly\"\n```\n:::\n:::\n\n\n## 4.4 Coordinated Multiple Views with plotly\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\n`highlight_key()` of `plotly` package is used as shared data. two scatterplots will be created by using ggplot2 functions. lastly, `subplot()` of `plotly` package is used to place them next to each other side-by-side.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nd <- highlight_key(exam_data)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in highlight_key(exam_data): could not find function \"highlight_key\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'd' not found\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'd' not found\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in subplot(ggplotly(p1), ggplotly(p2)): could not find function \"subplot\"\n```\n:::\n:::\n\n\n# 5.Interactive Data Visualisation - crosstalk methods\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering). \\## 5.1 Interactive Data Table: DT package A wrapper of the JavaScript Library DataTables\n\nData objects in R can be rendered as HTML tables using the JavaScript library â€˜DataTablesâ€™ (typically via R Markdown or Shiny).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nDT::datatable(exam_data, class= \"compact\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in loadNamespace(i, c(lib.loc, .libPaths()), versionCheck = vI[[i]]): namespace 'htmltools' 0.5.6 is already loaded, but >= 0.5.7 is required\n```\n:::\n:::\n\n\n## 5.2 Linked brushing: crosstalk method\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. bscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nd <- highlight_key(exam_data) \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in highlight_key(exam_data): could not find function \"highlight_key\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'd' not found\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in highlight(ggplotly(p), \"plotly_selected\"): could not find function \"highlight\"\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'gg' not found\n```\n:::\n:::\n\n\n#Part 2: Programming Animated Statistical Graphics with R \\# 1. Overview When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon.\n\n![](images/clipboard-2255747727.png){width=\"527\"} There are some terminologies: Frame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\n\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n# 2. Set up\n\n## 2.1 Load Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\npackage 'plotly' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\carol\\AppData\\Local\\Temp\\RtmpCszXu7\\downloaded_packages\n```\n:::\n:::\n\n\n## 2.2 Importing data\n\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\n\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate(across(col, as.factor)) %>%\n  mutate(Year = as.integer(Year))\n```\n:::\n\n\n# 3. Animated Data Visualisation: gganimate methods\n\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\n`transition_*()` defines how the data should be spread out and how it relates to itself across time. `view_*()` defines how the positional scales should change along the animation. `shadow_*()` defines how data from other points in time should be presented in the given point in time. `enter_*()/exit_*()` defines how new data should appear and how old data should disappear during the course of the animation. `ease_aes()` defines how different aesthetics should be eased during transitions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate(across(col, as.factor)) %>%\n  mutate(Year = as.integer(Year))\n```\n:::\n\n\n## 3.1 Building a static population bubble plot\n\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## 3.2 Building the animated bubble plot\n\n`transition_time()` of gganimate is used to create transition through distinct states in time (i.e. Year). `ease_aes()` is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')          \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex03_files/figure-html/unnamed-chunk-21-1.gif)\n:::\n:::\n\n\n# 4. Animated Data Visualisation: plotly\n\nIn `Plotly` R package, both `ggplotly()` and `plot_ly()` support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n## 4.1 Building an animated bubble plot: ggplotly() method\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg <- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplotly(gg): could not find function \"ggplotly\"\n```\n:::\n:::\n\n\n## 4.2 Building an animated bubble plot: plot_ly() method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbp <- globalPop %>%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %>%\n  layout(showlegend = FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in layout(., showlegend = FALSE): unused argument (showlegend = FALSE)\n```\n:::\n\n```{.r .cell-code}\nbp\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): object 'bp' not found\n```\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}